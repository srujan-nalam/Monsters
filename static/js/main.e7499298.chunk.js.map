{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAG,+BAA2BF,EAAMG,QAAQC,GAAzC,0BAAqEC,IAAI,YACjF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJbC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,UCLxBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAW,SACXa,KAAM,SACNC,YAAeH,EACfI,SAAUH,MCqCHI,G,wDAtCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,oBAI1C,WAAU,IAAD,OACP,EAAkCE,KAAKR,MAA/BT,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YAEZQ,EAAmBlB,EAASmB,QAAO,SAAAzB,GAAO,OAC9CA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAIlD,OACE,sBAAK5B,UAAU,MAAf,UACE,0CACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAgB,SAAAkB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAE5D,cAAC,EAAD,CAAUxB,SAAYkB,W,GA/BZO,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e7499298.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n        <img src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => (\r\n                <Card key = {monster.id} monster = {monster} />\r\n            ))\r\n        }            \r\n    </div>\r\n);","import React from \"react\";\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeHolder, handleChange}) => (\r\n    <input \r\n        className= 'search' \r\n        type= 'search' \r\n        placeholder = {placeHolder} \r\n        onChange={handleChange}\r\n    />\r\n);","import { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  \n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters</h1>\n        <SearchBox\n          placeHolder='Search Monsters'  \n          handleChange = {e => this.setState({searchField: e.target.value})}\n        />\n        <CardList monsters = {filteredMonsters} />\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}